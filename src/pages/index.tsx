"use client";

import Head from "next/head";
import Link from "next/link";
import React, { ReactElement, useEffect, useState } from "react";
import { useRouter } from "next/router";
import styled from "styled-components";
import { dehydrate, QueryClient, useQuery } from "react-query";
import type { DehydratedState } from "react-query";

import { GetStaticProps } from "next";

type Info = {
  description: string;
  rules: string[];
};

type Question = {
  id: string;
  question: string;
  answer: string;
};

const MainContainer = styled.main`
  max-width: 60rem;
  padding: 1rem;
  margin: auto;
  height: 100vh;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  h1,
  h2,
  ul {
    text-align: center;
    color: #e7006c;
  }

  p {
    font-weight: 600;
    color: gray;
    padding: 1rem 0;
    font-size: 1.1rem;
  }

  li {
    list-style: none;
    color: gray;
    padding: 0.1rem 0;
  }
`;

const LinkButton = styled(Link)`
  text-decoration: none;
  color: white;
`;

const fetchQuestions = async (): Promise<Question[]> => {
  const res = await fetch(process.env.NEXT_PUBLIC_ORIGIN + "/questions.json");
  const data = await res.json();

  return data;
};

export default function Home({
  dehydratedState,
}: {
  dehydratedState: DehydratedState;
}) {
  const { queries } = dehydratedState;
  const [state] = queries;
  const { state: stateData } = state;
  const { data } = stateData as { data: Info };

  const [qData, setQData] = useState([]);

  const {
    data: questionData,
    error,
    isError,
    isLoading,
    isSuccess,
  } = useQuery<Question[], { message: string }>({
    queryKey: ["questionData"],
    queryFn: fetchQuestions,
  });

  return (
    <>
      <Head>
        <title>quizz app</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainContainer>
        <h1>Quiz App</h1>
        <div>
          <p>{data.description}</p>
        </div>

        <h2>Rules</h2>
        <ul>
          {data.rules.map((rule: string) => (
            <li key={rule}>{rule}</li>
          ))}
        </ul>
        {isSuccess ? (
          <Link
            style={{
              textDecoration: "none",
              color: "white",
              backgroundColor: "#E4006C",
              textAlign: "center",
              padding: "0.5rem",
              borderRadius: "4px",
              fontWeight: "bold",
              margin: "1rem",
            }}
            href="/questions/[question]"
            as={`/questions/${questionData[0]?.id}`}
          >
            Start the quiz
          </Link>
        ) : (
          ""
        )}
      </MainContainer>
    </>
  );
}

// export const getStaticProps = async () => {
//   const res = await fetch(process.env.ORIGIN + "/api/hello");
//   const data = await res.json();

//   return {
//     props: {
//       data,
//     },
//   };
// };

const getInfo = async (): Promise<Info> => {
  if (!process.env.ORIGIN) throw new Error("base url not found");

  const res = await fetch(process.env.ORIGIN + "/info.json");

  const data = await res.json();

  return data;
};

export const getStaticProps: GetStaticProps = async (context) => {
  // ...

  const queryClient = new QueryClient();
  await queryClient.fetchQuery(["info"], () => getInfo());

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
